/*
[蓝桥杯][历届试题]买不到的数目

时间限制: 1Sec 内存限制: 128MB 提交: 191 解决: 126

题目描述
小明开了一家糖果店。他别出心裁：把水果糖包成4颗一包和7颗一包的两种。糖果不能拆包卖。 
小朋友来买糖的时候，他就用这两种包装来组合。当然有些糖果数目是无法组合出来的，比如要买  10  颗糖。 
你可以用计算机测试一下，在这种包装情况下，最大不能买到的数量是17。大于17的任何数字都可以用4和7组合出来。 
本题的要求就是在已知两个包装的数量时，求最大不能组合出的数字。 
输入
两个正整数，表示每种包装中糖的颗数(都不多于1000) 
输出
一个正整数，表示最大不能买到的糖数 
样例输入
4  7 
样例输出
17
提示
C语言在线学习平台微信号dotcpp
来源
历届试题
*/

#include <iostream>
#include <stdio.h>
#include <cstring>
using namespace std;
int gcd(int a, int b)    
{    
	return a%b == 0?b:gcd(b,a%b);   //求出两个数的最大公约数  
} 
int main()
{
	int n,m,k,j,i;
	int flag=0;
	scanf("%d%d",&n,&m);
	int op=n*m/gcd(n,m);//根据两个数的最大公约数，求出两个数的最小公倍数 
	for(  k=op;k>=1;k--)//因为我们要找到的是最大的，所以应该从大往小找 
	{
		flag=0;
		for(  i=0;i<=k/n;i++)
		{
			for(  j=0;j<=k/m;j++)
			{
				if(n*i+m*j==k)//表示可以组合成当前的个数，就不用往下循环了 
				{
					flag=1;
					break;
				}
			}
			if(flag==1)//当前这个k已经找到了 
				break;
		}
		if(flag==0)//当前这个k无论如何也找不出来，也就意味着没法组合，即为所求 
			break;      
	}
	printf("%d",k);       
	return 0;
}